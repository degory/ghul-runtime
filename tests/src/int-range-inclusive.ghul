namespace Tests is
    use Microsoft.VisualStudio.TestTools.UnitTesting;

    use Main.should;

    class INT_RANGE_INCLUSIVE_Should is
        @test()

        init() is si

        INT_RANGE_INCLUSIVE__init__given_0_to_10__constructs_range_with_11_elements() is
            @test()

            let range = new Ghul.INT_RANGE_INCLUSIVE(0, 10);

            assert range | .count() == 11;
        si        

        INT_RANGE_INCLUSIVE__init__given_0_to_10__constructs_range_with_11_elements_consecutive_elements_0_through_10() is
            @test()

            let range = new Ghul.INT_RANGE_INCLUSIVE(0, 10);

            should(range).equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
        si

        INT_RANGE_INCLUSIVE__init__given_10_to_0__constructs_range_with_0_elements() is
            @test()

            let range = new Ghul.INT_RANGE_INCLUSIVE(10, 0);

            assert range | .count() == 0;
        si

        INT_RANGE_INCLUSIVE__init__given_50_to_50__constructs_range_with_1_elements() is
            @test()

            let range = new Ghul.INT_RANGE_INCLUSIVE(50, 50);

            assert range | .count() == 1;
        si

        INT_RANGE_INCLUSIVE__colon_colon__given_0_to_10__constructs_range_with_consecutive_elements_0_through_10() is
            @test()

            let range = 0::10;

            should(range).equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);            
        si

        INT_RANGE_INCLUSIVE__colon_colon__minus_5_to_5__constructs_range_with_consecutive_elements_minus_5_through_5() is
            @test()

            let range = -5::5;

            should(range).equal([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]);            
        si

        INT_RANGE_INCLUSIVE__reset__given_partially_enumerated_range__starts_from_beginning_again() is
            @test()

            let range = 0::10;
            
            range | .take(5);

            should(range).equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
        si

        INT_RANGE_INCLUSIVE__from__given_0_to_10__is_0() is
            @test()

            let range = 0::10;

            assert range.from == 0;
        si

        INT_RANGE_INCLUSIVE__to__given_0_to_10__is_10() is
            @test()

            let range = 0::10;

            assert range.to == 10;
        si

        INT_RANGE_INCLUSIVE__move_next__given_0_to_10__returns_true() is
            @test()

            let range = 0::10;

            assert range.move_next();
        si

        INT_RANGE_INCLUSIVE__move_next__given_10_to_0__returns_true() is
            @test()

            let range = 10::0;

            assert !range.move_next();
        si
    si
si