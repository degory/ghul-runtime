namespace Tests is
    use Collections;
    use NSubstitute;

    use NSubstitute.SubstituteExtensions.returns;
    use NSubstitute.SubstituteExtensions.received;

    use Microsoft.VisualStudio.TestTools.UnitTesting;

    use Ghul.Pipes;

    empty[T]() -> T[] => System.Array.empty`[T]();

    iv[T](index: int, value: T) -> INDEXED_VALUE[T] => new INDEXED_VALUE[T](index, value);

    assert_are_equal[T](expected: Iterable[T], actual: Pipe[T]) is
        let expected_elements = new LIST[T]();
        let actual_elements = new LIST[T]();

        expected_elements.add_range(expected);
        actual_elements.add_range(actual);

        CollectionAssert.are_equal(expected_elements, actual_elements);
    si
        
    class AdaptorPipeShould is
        @test()

        _is_log_cleared: bool static;
   
        init() is
            if !_is_log_cleared then
                IO.File.create("/tmp/ghul-pipes.txt").close();
                _is_log_cleared = true;
            fi
        si

        Pipe_FromArray_ReturnsInstanceOfAdaptorPipe() is
            @test()

            let pipe = Ghul.Pipes.Pipe`[int].from([1, 2, 3, 4, 5]);

            Assert.is_instance_of_type(pipe, typeof AdaptorPipe[int]);
        si

        Count_NonEmptyArray_ReturnsElementCount() is
            @test()

            let pipe = new AdaptorPipe[int]([1, 2, 3, 4, 5]);

            Assert.are_equal(5, pipe.count());
        si

        Count_EmptyArray_ReturnsZero() is
            @test()

            let pipe = new AdaptorPipe[int](empty`[int]());

            Assert.are_equal(0, pipe.count());
        si

        // If the collection is a MutableBag (ICollection) then the count method should
        // call the Count method of the collection, rather than iterating over
        // the collection to count the elements.
        Count_MutableBag_CallsMutableBagCount() is
            @test()

            let collection = Substitute.`for`[MutableBag[int]](empty`[object]());

            returns(collection.iterator, [1, 2, 3, 4].iterator, null);
            returns(collection.count, 4, null);

            let pipe = new AdaptorPipe[int](collection);

            let count = pipe.count();

            let actual = received(collection, 1).count;
        si

        // If the collection is a MutableBag (IReadOnlyCollection) then the count
        // method should call the Count method of the collection, rather than
        // iterating over the collection to count the elements.
        Count_Bag_CallsBagCount() is
            @test()

            let collection = Substitute.`for`[MutableBag[int]](empty`[object]());

            returns(collection.iterator, [1, 2, 3, 4].iterator, null);
            returns(collection.count, 4, null);

            let pipe = new AdaptorPipe[int](collection);

            let count = pipe.count();

            let actual = received(collection, 1).count;
        si

        Iterator_ReturnsSelf() is
            @test()

            let pipe = new AdaptorPipe[string]([ "a", "b", "c" ]);

            Assert.are_same(pipe, pipe.iterator);
        si
        
        Iterator_ReturnsCorrectElements() is
            @test()

            let pipe = new AdaptorPipe[string]([ "a", "b", "c" ]);

            assert_are_equal(
                [ "a", "b", "c" ],
                pipe
            );
        si
    si
si
