namespace Tests is

    use Collections;
    use NSubstitute;

    use NSubstitute.SubstituteExtensions.returns;
    use NSubstitute.SubstituteExtensions.received;

    use Microsoft.VisualStudio.TestTools.UnitTesting;

    use Ghul.Pipes;


    class FilterPipeShould is
        @test()

        _is_log_cleared: bool static;

        init() is
            if !_is_log_cleared then
                IO.File.create("/tmp/ghul-pipes.txt").close();
                _is_log_cleared = true;
            fi
        si

        Filter_ConsecutiveNonMatchingValues_AreRemoved() is
            @test()

            let pipe = 
                Ghul.Pipes.Pipe`[int]
                    .from([3, 4, 5, 1, 2, 1, 2, 3, 4, 5]);


            let result = 
                pipe
                    .filter(i => i > 2);

            assert_are_equal([3, 4, 5, 3, 4, 5], result);
        si
        
        Filter_NonConsecutiveNonMatchingValues_AreRemoved() is
            @test()

            let pipe = 
                Ghul.Pipes.Pipe`[int]
                    .from([3, 4, 1, 5, 2, 3, 1, 4, 5]);

            let result =
                pipe
                    .filter(i => i > 2);

            assert_are_equal([3, 4, 5, 3, 4, 5], result);
        si

        Filter_LeadingNonMatchingValues_AreRemoved() is
            @test()

            let pipe = 
                Ghul.Pipes.Pipe`[int]
                    .from([1, 2, 1, 3, 4, 5, 6, 7]);

            let result =
                pipe
                    .filter(i => i > 2);

            assert_are_equal([3, 4, 5, 6, 7], result);
        si

        Filter_TrailingNonMatchingValues_AreRemoved() is
            @test()

            let pipe = 
                Ghul.Pipes.Pipe`[int]
                    .from([7, 6, 5, 4, 3, 2, 1]);

            let result =
                pipe
                    .filter(i => i > 2);

            assert_are_equal([7, 6, 5, 4, 3], result);
        si

        Filter_CalledTwice_ReturnsOnlyElementsThatMatchBothPredicates() is
            @test()

            let pipe = 
                Ghul.Pipes.Pipe`[int]
                    .from([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);

            let result =
                pipe
                    .filter(i => i > 3 /\ i < 9)
                    .filter(i => (i âˆ© 1) == 0);

            assert_are_equal([4, 6, 8], result);
        si

        Count_AlwaysTruePredicate_ReturnsElementCount() is
            @test()

            let input = ["a", "b", "c", "d"];

            let pipe = new FilterPipe[string](input.iterator, (e: string) => true);

            Assert.are_equal(4, pipe.count());
        si

        Count_EmptyList_ReturnsZero() is
            @test()

            let input = empty`[int]();

            let pipe = new FilterPipe[int](input.iterator, (e: int) => true);

            Assert.are_equal(0, pipe.count());
        si

        Iterator_ReturnsSelf() is
            @test()

            let input = ["a", "b", "c"];

            let pipe = new FilterPipe[string](input.iterator, (e: string) => true);

            Assert.are_same(pipe, pipe.iterator);
        si

        Iterator_AlwaysTruePredicate_ResultEqualsInput() is
            @test()

            let input = ["a", "b", "c"];

            let pipe = new FilterPipe[string](input.iterator, (e: string) => true);

            assert_are_equal(["a", "b", "c"], pipe);
        si
    si
si
