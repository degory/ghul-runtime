namespace Tests is
    use Microsoft.VisualStudio.TestTools.UnitTesting;

    use Collections.Iterable;
    use Collections.LIST;
    use Collections.LIST_REVERSE_ITERATOR;
    use Collections.LIST_REVERSE_ITERABLE;

    class LIST_REVERSE_ITERATOR_Should is
        @test()

        init() is si

        LIST_REVERSE_ITERATOR__iterator__given_empty_list__returns_no_elements() is
            @test()

            let iterator = new LIST_REVERSE_ITERATOR[int](new Collections.LIST[int]());

            assert_equal(collect(iterator), new Collections.LIST[int](0).to_array());
        si

        LIST_REVERSE_ITERATOR__iterator__given_single_element_list__returns_that_element() is
            @test()

            let iterator = new LIST_REVERSE_ITERATOR[int](new Collections.LIST[int]([1]));

            assert_equal(collect(iterator), [1]);
        si

        LIST_REVERSE_ITERATOR__iterator__given_odd_length_multiple_element_list__returns_elements_in_reverse_order() is
            @test()

            let iterator = new LIST_REVERSE_ITERATOR[int](new Collections.LIST[int]([1, 2, 3, 6, 7, 8, 11]));

            assert_equal(collect(iterator), [11, 8, 7, 6, 3, 2, 1]);
        si

        LIST_REVERSE_ITERATOR__iterator__given_even_length_multiple_element_list__returns_elements_in_reverse_order() is
            @test()

            let iterator = new LIST_REVERSE_ITERATOR[int](new Collections.LIST[int]([1, 2, 3, 6, 7, 8, 11, 3, 6, 2]));

            assert_equal(collect(iterator), [2, 6, 3, 11, 8, 7, 6, 3, 2, 1]);
        si
    si

    class LIST_REVERSE_ITERABLE_Should is
        @test()

        init() is si

        LIST_REVERSE_ITERABLE__iterator__given_empty_list__returns_empty_iterator() is
            @test()

            let iterable = new LIST_REVERSE_ITERABLE[int](new Collections.LIST[int]());

            assert_equal(empty[int](), iterable);
        si

        LIST_REVERSE_ITERABLE__iterator__given_non_empty_list__returns_iterator_over_that_list() is
            @test()

            let iterable = new LIST_REVERSE_ITERABLE[int]([1, 2, 3, 4, 5]);

            assert_equal([5, 4, 3, 2, 1], iterable);
        si
    si    
si